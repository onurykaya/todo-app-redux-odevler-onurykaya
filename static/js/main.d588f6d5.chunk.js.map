{"version":3,"sources":["actions/actions.js","actionCreators/actionCreaters.js","Todo.js","TodoList.js","AddTodo.js","RemoveAll.js","Filters.js","App.js","serviceWorker.js","reducer/reducer.js","store.js","index.js"],"names":["SET_FILTER","SET_TODOS","ADD_TODO","REMOVE_TODO","REMOVE_ALL_TODO","COMPLETE_STATUS","SHOW_NOTIFICATION","HIDE_NOTIFICATION","showNotification","notificationStatus","dispatch","type","setTimeout","Todo","this","props","content","id","itemClass","checked","className","onClick","toggleCompleteStatus","e","stopPropagation","removeTodo","Component","connect","TodoList","state","title","todos","length","map","todo","key","onCheckedToggle","React","AddTodo","changeInput","newVal","target","value","setState","inputVal","onAddTodo","preventDefault","addTodo","console","log","newTodo","Math","random","onSubmit","onChange","show","RemoveAll","removeAllTodos","options","label","labelKey","Filters","option","changeFilter","activeFilter","newFilter","setFilter","App","filterTodos","filterType","filter","localTodos","window","localStorage","getItem","JSON","parse","addTodos","prevProps","prevState","snapshot","stringify","setItem","style","setTodos","Boolean","location","hostname","match","rootReducer","action","concat","newTodos","newArr","currentTodo","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d588f6d5.chunk.js","sourcesContent":["export const SET_FILTER = 'SET_FILTER';\r\nexport const SET_TODOS  = 'SET_TODOS';\r\nexport const ADD_TODO   = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\nexport const REMOVE_ALL_TODO = \"REMOVE_ALL_TODO\";\r\nexport const COMPLETE_STATUS = \"COMPLETE_STATUS\";\r\nexport const SHOW_NOTIFICATION = \"SHOW_NOTIFICATION\";\r\nexport const HIDE_NOTIFICATION = \"HIDE_NOTIFICATION\";","import {SET_FILTER, SET_TODOS, ADD_TODO, REMOVE_TODO, REMOVE_ALL_TODO, COMPLETE_STATUS, SHOW_NOTIFICATION, HIDE_NOTIFICATION} from \"../actions/actions\";\r\n\r\nexport function setFilter(newFilter){\r\n    return {type: SET_FILTER, activeFilter: newFilter}\r\n}\r\n\r\nexport function setTodos(todos){\r\n    return {type: SET_TODOS, todos}\r\n}\r\n\r\nexport function addTodo(todo){\r\n    return(dispatch) =>{\r\n        dispatch({type: ADD_TODO, todo})\r\n        dispatch(showNotification(`${todo.content} Eklendi`))\r\n    }\r\n}\r\n\r\nexport function removeTodo(id){\r\n    return(dispatch) => {\r\n        dispatch({type: REMOVE_TODO, id})\r\n        dispatch(showNotification(`Silindi`))\r\n    }\r\n}\r\n\r\nexport function removeAllTodos(){\r\n    return(dispatch) => {\r\n        dispatch({type: REMOVE_ALL_TODO})\r\n        dispatch(showNotification(`Hepsi Silindi `))\r\n    }\r\n}\r\n\r\nexport function toggleCompleteStatus(id){\r\n    return {type:COMPLETE_STATUS, id}\r\n}\r\n\r\nexport function showNotification(notificationStatus) {\r\n    return (dispatch) => {\r\n        dispatch({type: SHOW_NOTIFICATION, notificationStatus })\r\n        setTimeout(()=>{\r\n            dispatch(hideNotification());\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nexport function hideNotification(){\r\n    return {type: HIDE_NOTIFICATION}\r\n}","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {removeTodo, toggleCompleteStatus} from \"./actionCreators/actionCreaters\";\r\n\r\nclass Todo extends Component {\r\n\r\n    render() {\r\n    const {content, id, checked} = this.props;\r\n    let itemClass= \"todo-item\";\r\n    if(checked){\r\n        itemClass += \" checked\";\r\n    }\r\n        return(\r\n            <div>\r\n                \r\n                <div className={itemClass} onClick={() => {this.props.toggleCompleteStatus(id);}}>\r\n                {content}\r\n                <span\r\n                    className=\"remove-todo\"\r\n                    onClick={(e) => {e.stopPropagation();this.props.removeTodo(id)}}>X</span>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    removeTodo: (id) => {dispatch(removeTodo(id))},\r\n    toggleCompleteStatus: (id) => {dispatch(toggleCompleteStatus(id))},\r\n    \r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Todo);\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\n\r\nclass TodoList extends React.Component{\r\n    state= {\r\n        title: \"YapÄ±lacaklar\"\r\n    }\r\n\r\n    render(){\r\n       \r\n        return (\r\n            \r\n            <div className=\"todo-list\">\r\n                <h3>\r\n                    {this.state.title} <span>{this.props.todos.length}</span>\r\n                </h3>\r\n                {\r\n                    this.props.todos.map((todo) => {\r\n                        return <Todo\r\n                            {...todo}\r\n                            key={todo.id}\r\n                            onCheckedToggle={this.props.onCheckedToggle}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {addTodo} from \"./actionCreators/actionCreaters\";\r\n\r\n\r\nclass AddTodo extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            inputVal: \"\"\r\n        };\r\n    }\r\n\r\n    changeInput=(e)=>{\r\n        const newVal = e.target.value;\r\n        this.setState({\r\n            inputVal: newVal\r\n        });\r\n    }\r\n\r\n       addTodo(newTodo){\r\n      this.props.addTodo({         \r\n          content: newTodo,\r\n          id: Math.random(),\r\n          checked: false\r\n      });\r\n  }\r\n\r\n    onAddTodo=(e)=>{ \r\n        e.preventDefault();\r\n        this.addTodo(this.state.inputVal);       \r\n        console.log(this.state.inputVal);\r\n        this.setState({\r\n            inputVal: \"\"\r\n        });\r\n    }\r\n\r\n\r\n    render() {   \r\n        return (\r\n            <div>\r\n\r\n                <form onSubmit={this.onAddTodo}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={this.state.inputVal}\r\n                        onChange={this.changeInput} />\r\n                    <button>Ekle</button>\r\n                \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    show: state.show,\r\n    notificationStatus: state.notificationStatus\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTodo: (todo) => {dispatch(addTodo(todo))}\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodo);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {removeAllTodos} from \"./actionCreators/actionCreaters\";\r\n\r\n\r\nclass RemoveAll extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <button className = \"remove-all\"\r\n            onClick = {() => {\r\n                    this.props.removeAllTodos();\r\n                }\r\n            } >\r\n                    TÃ¼mÃ¼nÃ¼ Sil\r\n            </button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    show: state.show,\r\n    notificationStatus: state.notificationStatus\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch =>({\r\n    removeAllTodos: () => {dispatch(removeAllTodos())},\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveAll);\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {setFilter} from \"./actionCreators/actionCreaters\";\r\n\r\nconst options = [\r\n    {label: \"Hepsi\", labelKey: \"all\"},\r\n    {label: \"TamamlanmÄ±Å\", labelKey: \"completed\"},\r\n    {label: \"TamamlanmamÄ±Å\", labelKey: \"uncompleted\"}\r\n];\r\n\r\nclass Filters extends Component {\r\n    render() {\r\n        console.log(this.props);\r\n        return <div>\r\n            {\r\n                options.map((option) => {\r\n                    return <div onClick={() => {\r\n                        this.props.changeFilter(option.labelKey);\r\n                       \r\n                    }}>\r\n                       <p className=\"option-button\">{option.label}</p> \r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeFilter: state.activeFilter\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeFilter: (newFilter) => {dispatch(setFilter(newFilter))}\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filters);","import React, {Component} from 'react';\r\nimport TodoList from \"./TodoList\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport RemoveAll from \"./RemoveAll\";\r\nimport \"./styles/styles.css\";\r\nimport Filters from \"./Filters\";\r\nimport {connect} from \"react-redux\";\r\nimport {setTodos} from \"./actionCreators/actionCreaters\";\r\n\r\n\r\nclass App extends Component {\r\n \r\n\r\n  componentDidMount() {\r\n      console.log(\"GÃncel proplar\", this.props);\r\n    // Component oluÅtuktan sonra gerekli olan datayÄ± localstoragedan geyiriyoruz.\r\n    let localTodos = window.localStorage.getItem(\"todos\");\r\n    if(localTodos){\r\n      localTodos  = JSON.parse(localTodos);\r\n    }\r\n    this.props.addTodos(localTodos || []);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n      if(JSON.stringify(prevProps.todos) !== JSON.stringify(this.props.todos)){\r\n          window.localStorage.setItem(\"todos\", JSON.stringify(this.props.todos))\r\n      }\r\n  }\r\n\r\n\r\n  filterTodos = (todos, filterType) => {\r\n    if(filterType === \"all\"){\r\n        return todos;\r\n    }else if (filterType === \"completed\"){\r\n        return todos.filter((todo) => todo.checked);\r\n    }else{\r\n        return todos.filter((todo) => !todo.checked);\r\n    }\r\n  }\r\n\r\n  render(){\r\n      console.log(\"App props\", this.props);\r\n    return (\r\n        <div className=\"App\" id=\"todo\">\r\n            {\r\n                this.props.show &&  <div style={{\"background\": \"black\", \"color\": \"white\", \"padding\": \"15px\", \"fontSize\": \"20px\"}}>\r\n                    {this.props.notificationStatus}\r\n                </div>\r\n            }\r\n            <div className=\"todo-list todo-list-add\">\r\n                <h3>Todo Ekle / Sil</h3>\r\n                <div>\r\n                    <AddTodo  />\r\n                    <RemoveAll />\r\n                    <Filters />\r\n                </div>\r\n            </div>\r\n            <TodoList todos={this.filterTodos(this.props.todos, this.props.activeFilter)}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  activeFilter: state.activeFilter,\r\n  todos: state.todos,\r\n  show: state.show,\r\n  notificationStatus: state.notificationStatus\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTodos: (todos) => {dispatch(setTodos(todos))}\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {SET_FILTER, SET_TODOS, ADD_TODO, REMOVE_TODO, REMOVE_ALL_TODO, COMPLETE_STATUS, SHOW_NOTIFICATION, HIDE_NOTIFICATION} from \"../actions/actions\";\r\n\r\nconst rootReducer = function (state = {\r\n    activeFilter: \"all\",\r\n    todos: [],\r\n    show: false,\r\n    notificationStatus: ''\r\n \r\n}, action) {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return {...state, activeFilter: action.activeFilter};\r\n        case SET_TODOS:\r\n            return {...state, todos: action.todos}\r\n        case ADD_TODO:            \r\n            return {...state, todos: state.todos.concat([action.todo])}\r\n        case REMOVE_TODO:\r\n            const newTodos = state.todos.filter((todo) => todo.id !== action.id);\r\n            return {\r\n                ...state,\r\n                todos: newTodos\r\n            };\r\n        case REMOVE_ALL_TODO:\r\n            return {\r\n                ...state,\r\n                todos : []\r\n            }\r\n\r\n        case COMPLETE_STATUS:\r\n            const newArr = state.todos.map((todo)=>{\r\n                if(action.id === todo.id){\r\n                    let currentTodo = {...todo};\r\n                    currentTodo.checked = !currentTodo.checked;\r\n                    return currentTodo\r\n                }else{\r\n                    return todo;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                todos: newArr\r\n            }\r\n        case SHOW_NOTIFICATION: \r\n            return {\r\n                ...state,\r\n                show: true,\r\n                notificationStatus: action.notificationStatus\r\n            }\r\n        case HIDE_NOTIFICATION:\r\n            return {...state, show: false}\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default rootReducer","import {createStore, applyMiddleware} from 'redux';\r\nimport reducer from './reducer/reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider, connect} from \"react-redux\";\r\nimport store  from \"./store\";\r\n\r\nconst ProvideApp = (props) => <Provider store={store}><App /></Provider>\r\nReactDOM.render(<ProvideApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}